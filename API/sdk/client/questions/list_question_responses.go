// Code generated by go-swagger; DO NOT EDIT.

package questions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"NOOBDY/questions_server/sdk/models"
)

// ListQuestionReader is a Reader for the ListQuestion structure.
type ListQuestionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListQuestionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListQuestionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewListQuestionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListQuestionOK creates a ListQuestionOK with default headers values
func NewListQuestionOK() *ListQuestionOK {
	return &ListQuestionOK{}
}

/*ListQuestionOK handles this case with default header values.

Data structure representing a single question
*/
type ListQuestionOK struct {
	Payload *models.Question
}

func (o *ListQuestionOK) Error() string {
	return fmt.Sprintf("[GET /questions/{id}][%d] listQuestionOK  %+v", 200, o.Payload)
}

func (o *ListQuestionOK) GetPayload() *models.Question {
	return o.Payload
}

func (o *ListQuestionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Question)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListQuestionNotFound creates a ListQuestionNotFound with default headers values
func NewListQuestionNotFound() *ListQuestionNotFound {
	return &ListQuestionNotFound{}
}

/*ListQuestionNotFound handles this case with default header values.

Generic error message returned as a string
*/
type ListQuestionNotFound struct {
	Payload *models.GenericError
}

func (o *ListQuestionNotFound) Error() string {
	return fmt.Sprintf("[GET /questions/{id}][%d] listQuestionNotFound  %+v", 404, o.Payload)
}

func (o *ListQuestionNotFound) GetPayload() *models.GenericError {
	return o.Payload
}

func (o *ListQuestionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
